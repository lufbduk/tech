import{_ as e,c as i,o as a,ae as n}from"./chunks/framework.CEHkq4dy.js";const c=JSON.parse('{"title":"npm 包依赖管理最佳实践：dependencies 与 peerDependencies 深度解析","description":"深入探讨 npm 中 dependencies 和 peerDependencies 的区别、安装行为、打包影响以及最佳实践，帮助开发者避免依赖冲突和冗余安装。","frontmatter":{"title":"npm 包依赖管理最佳实践：dependencies 与 peerDependencies 深度解析","description":"深入探讨 npm 中 dependencies 和 peerDependencies 的区别、安装行为、打包影响以及最佳实践，帮助开发者避免依赖冲突和冗余安装。","date":"2025-01-24T00:00:00.000Z","tags":["npm","包管理","dependencies","peerDependencies","Node.js","前端工程化"],"keywords":"npm, dependencies, peerDependencies, package.json, node_modules, 打包, webpack, externals, 依赖管理, 前端开发, JavaScript, Node.js, 最佳实践, 版本冲突, 共享依赖","author":"lufbduk","category":"技术笔记","head":[["meta",{"name":"keywords","content":"npm,dependencies,peerDependencies,package.json,node_modules,打包,webpack,externals,依赖管理,前端开发"}],["meta",{"property":"og:title","content":"npm 包依赖管理最佳实践：dependencies 与 peerDependencies 深度解析"}],["meta",{"property":"og:description","content":"深入探讨 npm 中 dependencies 和 peerDependencies 的区别、安装行为、打包影响以及最佳实践，帮助开发者避免依赖冲突和冗余安装"}]]},"headers":[],"relativePath":"ai-tech-notes/npm包依赖管理最佳实践.md","filePath":"ai-tech-notes/npm包依赖管理最佳实践.md","lastUpdated":1749284282000}'),t={name:"ai-tech-notes/npm包依赖管理最佳实践.md"};function l(p,s,d,h,r,o){return a(),i("div",null,s[0]||(s[0]=[n("",93)]))}const g=e(t,[["render",l]]);export{c as __pageData,g as default};
