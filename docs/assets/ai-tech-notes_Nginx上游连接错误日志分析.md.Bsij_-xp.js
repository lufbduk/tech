import{_ as i,c as e,o as a,ae as t}from"./chunks/framework.CEHkq4dy.js";const c=JSON.parse('{"title":"Nginx上游连接错误日志分析","description":"详细分析 Nginx 上游连接错误日志，包括连接过早关闭、连接重置等常见问题的原因和解决方案","frontmatter":{"title":"Nginx上游连接错误日志分析","description":"详细分析 Nginx 上游连接错误日志，包括连接过早关闭、连接重置等常见问题的原因和解决方案","date":"2025-02-01T00:00:00.000Z","tags":["Nginx","上游服务","故障排查","服务器运维","错误日志"],"keywords":"Nginx错误日志,上游连接错误,upstream prematurely closed,连接重置,服务器故障排查","author":"lufbduk","category":"技术笔记","head":[["meta",{"name":"keywords","content":"Nginx错误日志,上游连接错误,upstream prematurely closed,连接重置,服务器故障排查,运维"}],["meta",{"property":"og:title","content":"Nginx上游连接错误日志分析 - 故障排查与解决方案"}],["meta",{"property":"og:description","content":"详细分析 Nginx 上游连接错误日志，包括连接过早关闭、连接重置等常见问题的原因和解决方案"}]]},"headers":[],"relativePath":"ai-tech-notes/Nginx上游连接错误日志分析.md","filePath":"ai-tech-notes/Nginx上游连接错误日志分析.md","lastUpdated":1749284282000}'),n={name:"ai-tech-notes/Nginx上游连接错误日志分析.md"};function l(r,s,p,o,h,d){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="nginx上游连接错误日志分析" tabindex="-1">Nginx上游连接错误日志分析 <a class="header-anchor" href="#nginx上游连接错误日志分析" aria-label="Permalink to &quot;Nginx上游连接错误日志分析&quot;">​</a></h1><blockquote><p><strong>摘要</strong>：本文分析一组典型的 Nginx 上游连接错误日志，包括&quot;upstream prematurely closed connection&quot;和&quot;Connection reset by peer&quot;等错误，深入探讨这些错误的原因、影响以及相应的解决方案。</p></blockquote><h2 id="错误日志示例" tabindex="-1">错误日志示例 <a class="header-anchor" href="#错误日志示例" aria-label="Permalink to &quot;错误日志示例&quot;">​</a></h2><p>2025/05/11 23:52:08 [error] 3599761#3599761: *3 upstream prematurely closed connection while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;POST /api/v1/embeddings HTTP/1.1&quot;, upstream: &quot;<a href="http://127.0.0.1:8000/api/v1/embeddings" target="_blank" rel="noreferrer">http://127.0.0.1:8000/api/v1/embeddings</a>&quot;, host: &quot;【已脱敏ip地址】&quot;, referrer: &quot;http://【已脱敏ip地址】/api/v1/docs&quot; 2025/05/11 23:52:08 [warn] 3599761#3599761: *3 upstream server temporarily disabled while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;POST /api/v1/embeddings HTTP/1.1&quot;, upstream: &quot;<a href="http://127.0.0.1:8000/api/v1/embeddings" target="_blank" rel="noreferrer">http://127.0.0.1:8000/api/v1/embeddings</a>&quot;, host: &quot;【已脱敏ip地址】&quot;, referrer: &quot;http://【已脱敏ip地址】/api/v1/docs&quot; 2025/05/11 23:57:48 [error] 3599760#3599760: *9 upstream prematurely closed connection while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/text-embedding/%E4%BD%A0%E5%A5%BD HTTP/1.1&quot;, upstream: &quot;<a href="http://127.0.0.1:8000/api/v1/text-embedding/%E4%BD%A0%E5%A5%BD" target="_blank" rel="noreferrer">http://127.0.0.1:8000/api/v1/text-embedding/你好</a>&quot;, host: &quot;【已脱敏ip地址】&quot;, referrer: &quot;http://【已脱敏ip地址】/api/v1/docs&quot; 2025/05/11 23:57:48 [warn] 3599760#3599760: *9 upstream server temporarily disabled while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/text-embedding/%E4%BD%A0%E5%A5%BD HTTP/1.1&quot;, upstream: &quot;<a href="http://127.0.0.1:8000/api/v1/text-embedding/%E4%BD%A0%E5%A5%BD" target="_blank" rel="noreferrer">http://127.0.0.1:8000/api/v1/text-embedding/你好</a>&quot;, host: &quot;【已脱敏ip地址】&quot;, referrer: &quot;http://【已脱敏ip地址】/api/v1/docs&quot; 2025/05/11 23:57:48 [error] 3599760#3599760: *9 recv() failed (104: Connection reset by peer) while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/text-embedding/%E4%BD%A0%E5%A5%BD HTTP/1.1&quot;, upstream: &quot;http://[::1]:8000/api/v1/text-embedding/%E4%BD%A0%E5%A5%BD&quot;, host: &quot;【已脱敏ip地址】&quot;, referrer: &quot;http://【已脱敏ip地址】/api/v1/docs&quot; 2025/05/11 23:57:48 [warn] 3599760#3599760: *9 upstream server temporarily disabled while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/text-embedding/%E4%BD%A0%E5%A5%BD HTTP/1.1&quot;, upstream: &quot;http://[::1]:8000/api/v1/text-embedding/%E4%BD%A0%E5%A5%BD&quot;, host: &quot;【已脱敏ip地址】&quot;, referrer: &quot;http://【已脱敏ip地址】/api/v1/docs&quot; 2025/05/12 00:09:19 [error] 3599760#3599760: *32 upstream prematurely closed connection while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/model/info HTTP/1.1&quot;, upstream: &quot;<a href="http://127.0.0.1:8000/api/v1/model/info" target="_blank" rel="noreferrer">http://127.0.0.1:8000/api/v1/model/info</a>&quot;, host: &quot;【已脱敏ip地址】&quot;, referrer: &quot;http://【已脱敏ip地址】/api/v1/docs&quot; 2025/05/12 00:09:19 [warn] 3599760#3599760: *32 upstream server temporarily disabled while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/model/info HTTP/1.1&quot;, upstream: &quot;<a href="http://127.0.0.1:8000/api/v1/model/info" target="_blank" rel="noreferrer">http://127.0.0.1:8000/api/v1/model/info</a>&quot;, host: &quot;【已脱敏ip地址】&quot;, referrer: &quot;http://【已脱敏ip地址】/api/v1/docs&quot; 2025/05/12 00:09:19 [error] 3599760#3599760: *32 recv() failed (104: Connection reset by peer) while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/model/info HTTP/1.1&quot;, upstream: &quot;http://[::1]:8000/api/v1/model/info&quot;, host: &quot;【已脱敏ip地址】&quot;, referrer: &quot;http://【已脱敏ip地址】/api/v1/docs&quot; 2025/05/12 00:09:19 [warn] 3599760#3599760: *32 upstream server temporarily disabled while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/model/info HTTP/1.1&quot;, upstream: &quot;http://[::1]:8000/api/v1/model/info&quot;, host: &quot;【已脱敏ip地址】&quot;, referrer: &quot;http://【已脱敏ip地址】/api/v1/docs&quot; 2025/05/12 00:15:19 [notice] 3599759#3599759: signal 3 (SIGQUIT) received from 1, shutting down 2025/05/12 00:15:19 [notice] 3599760#3599760: gracefully shutting down</p><p>上述日志说明什么</p><p>这些Nginx错误日志表明您的上游服务（运行在127.0.0.1:8000或[::1]:8000）存在连接问题。以下是关键问题的分析：</p><ol><li><p><strong>主要错误类型</strong>：</p><ul><li><code>upstream prematurely closed connection</code>（上游过早关闭连接）</li><li><code>recv() failed (104: Connection reset by peer)</code>（对端重置连接）</li><li>伴随<code>upstream server temporarily disabled</code>警告（Nginx暂时禁用了该上游服务器）</li></ul></li><li><p><strong>问题表现</strong>：</p><ul><li>上游服务在处理请求（POST /embeddings、GET /text-embedding、GET /model/info）时突然断开连接</li><li>问题同时出现在IPv4(127.0.0.1)和IPv6(::1)地址上</li><li>最终Nginx收到了关闭信号(SIGQUIT)开始优雅关闭</li></ul></li><li><p><strong>可能原因</strong>：</p><ul><li>上游服务(8000端口)崩溃或进程被杀死</li><li>上游服务资源不足（OOM被系统终止）</li><li>请求超时时间设置过短</li><li>上游服务存在bug导致崩溃</li><li>服务器资源耗尽（内存/CPU）</li><li>网络配置问题（特别是同时出现IPv4/IPv6失败）</li></ul></li><li><p><strong>建议解决方案</strong>：</p><ul><li>检查上游服务日志（8000端口的应用日志）</li><li>监控服务器资源使用情况（内存/CPU）</li><li>增加Nginx的proxy_read_timeout值</li><li>检查上游服务的稳定性（是否有内存泄漏）</li><li>验证上游服务是否能处理这些特定请求</li><li>检查是否有监控系统或管理操作导致了服务重启</li></ul></li></ol><p>需要特别注意这些错误集中在短时间内发生，且最终导致Nginx重启，表明上游服务可能已经完全不可用。建议优先检查上游服务的状态和日志。</p><p>2025/05/12 00:15:19 [notice] 3609160#3609160: start worker process 3609161 2025/05/12 00:15:19 [notice] 3609160#3609160: start worker process 3609163 2025/05/12 00:17:53 [error] 3609161#3609161: *1 upstream prematurely closed connection while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/model/info HTTP/1.1&quot;, upstream: &quot;http://[::1]:8000/api/v1/model/info&quot;, host: &quot;【已脱敏域名】&quot;, referrer: &quot;http://【已脱敏域名】/api/v1/docs&quot; 2025/05/12 00:17:53 [warn] 3609161#3609161: *1 upstream server temporarily disabled while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/model/info HTTP/1.1&quot;, upstream: &quot;http://[::1]:8000/api/v1/model/info&quot;, host: &quot;【已脱敏域名】&quot;, referrer: &quot;http://【已脱敏域名】/api/v1/docs&quot; 2025/05/12 00:17:53 [error] 3609161#3609161: *1 recv() failed (104: Connection reset by peer) while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/model/info HTTP/1.1&quot;, upstream: &quot;<a href="http://127.0.0.1:8000/api/v1/model/info" target="_blank" rel="noreferrer">http://127.0.0.1:8000/api/v1/model/info</a>&quot;, host: &quot;【已脱敏域名】&quot;, referrer: &quot;http://【已脱敏域名】/api/v1/docs&quot; 2025/05/12 00:17:53 [warn] 3609161#3609161: *1 upstream server temporarily disabled while reading response header from upstream, client: 【已脱敏ip地址】, server: 【已脱敏域名】, request: &quot;GET /api/v1/model/info HTTP/1.1&quot;, upstream: &quot;<a href="http://127.0.0.1:8000/api/v1/model/info" target="_blank" rel="noreferrer">http://127.0.0.1:8000/api/v1/model/info</a>&quot;, host: &quot;【已脱敏域名】&quot;, referrer: &quot;http://【已脱敏域名】/api/v1/docs&quot;</p><p>这段呢</p><p>这段日志是前一段问题的延续，显示Nginx重启后上游服务仍然存在问题。以下是具体分析：</p><hr><h3 id="关键日志解析" tabindex="-1"><strong>关键日志解析</strong> <a class="header-anchor" href="#关键日志解析" aria-label="Permalink to &quot;**关键日志解析**&quot;">​</a></h3><ol><li><p><strong>Nginx重启</strong></p><ul><li><code>2025/05/12 00:15:19 [notice] 3609160#3609160: start worker process 3609161</code><br> Nginx主进程启动了新的Worker进程（可能是服务重启或配置重载）。</li></ul></li><li><p><strong>上游服务仍不可用</strong></p><ul><li>2分钟后（<code>00:17:53</code>），客户端再次请求 <code>GET /api/v1/model/info</code>，但依然失败： <ul><li><strong>IPv6尝试失败</strong> (<code>[::1]:8000</code>)：<div class="language-log vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">log</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">upstream prematurely closed connection</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">recv() failed (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">104</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Connection reset by peer)</span></span></code></pre></div></li><li><strong>IPv4尝试失败</strong> (<code>127.0.0.1:8000</code>)：<div class="language-log vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">log</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">upstream server temporarily disabled</span></span></code></pre></div></li></ul></li></ul></li></ol><hr><h3 id="问题诊断" tabindex="-1"><strong>问题诊断</strong> <a class="header-anchor" href="#问题诊断" aria-label="Permalink to &quot;**问题诊断**&quot;">​</a></h3><ol><li><p><strong>上游服务未恢复</strong></p><ul><li>Nginx重启后，上游服务（<code>8000</code>端口）仍然无法正常响应，可能是： <ul><li>服务进程未启动或崩溃。</li><li>服务启动但监听失败（端口冲突、配置错误）。</li><li>服务启动后因异常（如OOM、崩溃）再次退出。</li></ul></li></ul></li><li><p><strong>连接重置（Connection reset by peer）</strong></p><ul><li>上游服务主动断开连接，可能原因： <ul><li>服务进程崩溃（如Python应用未捕获异常）。</li><li>资源不足（内存/CPU耗尽，被系统终止）。</li><li>请求触发了服务的Bug（如特定接口导致崩溃）。</li></ul></li></ul></li><li><p><strong>IPv4和IPv6双栈失败</strong></p><ul><li>日志显示Nginx同时尝试了IPv6(<code>[::1]</code>)和IPv4(<code>127.0.0.1</code>)，均失败，说明问题与网络协议无关，而是上游服务本身的问题。</li></ul></li></ol><hr><h3 id="建议排查步骤" tabindex="-1"><strong>建议排查步骤</strong> <a class="header-anchor" href="#建议排查步骤" aria-label="Permalink to &quot;**建议排查步骤**&quot;">​</a></h3><ol><li><p><strong>检查上游服务状态</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查8000端口是否在监听</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ss</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -tulnp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查服务进程是否运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> aux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;你的服务进程名&quot;</span></span></code></pre></div></li><li><p><strong>查看上游服务日志</strong></p><ul><li>直接查看上游服务（如FastAPI、Flask等）的日志，定位崩溃原因：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">journalctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-service-name</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # systemd服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/log/your-app.log</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 自定义日志路径</span></span></code></pre></div></li></ul></li><li><p><strong>验证服务是否响应</strong></p><ul><li>手动测试上游服务是否健康：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://127.0.0.1:8000/api/v1/model/info</span></span></code></pre></div></li></ul></li><li><p><strong>检查资源限制</strong></p><ul><li>确认服务器资源（内存、CPU）是否充足：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">free</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 内存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">top</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # CPU和进程状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 查看内核日志（OOM Killer记录）</span></span></code></pre></div></li></ul></li><li><p><strong>临时解决方案</strong></p><ul><li>如果服务崩溃频繁，可以配置Nginx重试机制或超时时间：<div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /api/ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://127.0.0.1:8000;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_read_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 默认60秒可能过短</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_next_upstream </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeout http_500;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ol><hr><h3 id="常见根本原因" tabindex="-1"><strong>常见根本原因</strong> <a class="header-anchor" href="#常见根本原因" aria-label="Permalink to &quot;**常见根本原因**&quot;">​</a></h3><ul><li><strong>应用Bug</strong>：上游服务对特定请求（如<code>/model/info</code>）处理时崩溃。</li><li><strong>依赖服务故障</strong>：如数据库连接超时、GPU推理服务挂起。</li><li><strong>资源不足</strong>：内存泄漏导致OOM Killer终止进程。</li><li><strong>配置错误</strong>：服务绑定到错误IP或端口。</li></ul><p>需要结合上游服务的日志进一步分析。如果是Python应用，可以检查是否捕获了全局异常，或者是否有第三方库（如PyTorch/TensorFlow）因资源问题崩溃。</p><p>[4016034.541336] [1463553] 0 1463553 10427 905 118784 0 0 tat_agent [4016034.541339] [3385641] 0 3385641 2121 228 57344 0 0 crond [4016034.541342] [3402530] 0 3402530 3967 351 77824 0 -1000 sshd [4016034.541344] [3409101] 0 3409101 8016 427 86016 0 -1000 systemd-udevd [4016034.541346] [3409102] 0 3409102 16479 300 172032 0 -250 systemd-journal [4016034.541349] [3410244] 0 3410244 450593 3879 294912 0 -999 containerd [4016034.541351] [3410255] 0 3410255 582013 9317 663552 0 -500 dockerd [4016034.541354] [3576608] 0 3576608 2067 385 53248 0 0 bash [4016034.541356] [3576678] 0 3576678 2067 374 61440 0 0 bash [4016034.541360] [3609160] 0 3609160 2580 281 53248 0 0 nginx [4016034.541362] [3609161] 993 3609161 2714 348 57344 0 0 nginx [4016034.541364] [3609163] 993 3609163 2714 360 57344 0 0 nginx [4016034.541367] [3610086] 0 3610086 309524 1191 118784 0 -998 containerd-shim [4016034.541369] [3610113] 0 3610113 1198619 337723 3850240 0 0 uvicorn [4016034.541371] [3610147] 0 3610147 417822 238 143360 0 -500 docker-proxy [4016034.541373] [3610153] 0 3610153 399389 243 143360 0 -500 docker-proxy [4016034.541375] [3610857] 0 3610857 443409 1990 229376 0 0 docker [4016034.541377] [3610876] 0 3610876 645 11 45056 0 0 sh [4016034.541379] [3610882] 0 3610882 4994 336 81920 0 0 curl [4016034.541382] [3610933] 0 3610933 4994 323 81920 0 0 curl [4016034.541383] oom-kill:constraint=CONSTRAINT_NONE,nodemask=(null),cpuset=containerd.service,mems_allowed=0,global_oom,task_memcg=/system.slice/docker-【容器ID已脱敏】.scope,task=uvicorn,pid=3610113,uid=0 [4016034.541405] Out of memory: Killed process 3610113 (uvicorn) total-vm:4794476kB, anon-rss:1350640kB, file-rss:252kB, shmem-rss:0kB, UID:0 pgtables:3760kB oom_score_adj:0 [4016035.103260] 【网络标识符已脱敏】: port 1(【虚拟网络接口已脱敏】) entered disabled state [4016035.105202] 【虚拟网络接口已脱敏】: renamed from eth0 [4016035.125791] 【网络标识符已脱敏】: port 1(【虚拟网络接口已脱敏】) entered disabled state [4016035.126056] 【虚拟网络接口已脱敏】 (unregistering): left allmulticast mode [4016035.126060] 【虚拟网络接口已脱敏】 (unregistering): left promiscuous mode [4016035.126062] 【网络标识符已脱敏】: port 1(【虚拟网络接口已脱敏】) entered disabled state [4016035.332542] 【网络标识符已脱敏】: port 1(【虚拟网络接口已脱敏】) entered blocking state [4016035.332546] 【网络标识符已脱敏】: port 1(【虚拟网络接口已脱敏】) entered disabled state [4016035.332565] 【虚拟网络接口已脱敏】: entered allmulticast mode [4016035.332606] 【虚拟网络接口已脱敏】: entered promiscuous mode [4016035.332706] 【网络标识符已脱敏】: port 1(【虚拟网络接口已脱敏】) entered blocking state [4016035.332709] 【网络标识符已脱敏】: port 1(【虚拟网络接口已脱敏】) entered forwarding state [4016035.354919] eth0: renamed from 【虚拟网络接口已脱敏】</p><p>从日志中可以明确看到，系统触发了 <strong>OOM Killer（Out-Of-Memory Killer）</strong>，并杀死了 <code>uvicorn</code> 进程（PID <code>3610113</code>），导致上游服务崩溃，进而引发 Nginx 报错 <code>upstream prematurely closed connection</code>。以下是详细分析：</p><hr><h3 id="关键日志解析-1" tabindex="-1"><strong>关键日志解析</strong> <a class="header-anchor" href="#关键日志解析-1" aria-label="Permalink to &quot;**关键日志解析**&quot;">​</a></h3><ol><li><p><strong>OOM Killer 触发</strong></p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>oom-kill:constraint=CONSTRAINT_NONE,nodemask=(null),cpuset=containerd.service,mems_allowed=0,global_oom,task_memcg=/system.slice/docker-【容器ID已脱敏】.scope,task=uvicorn,pid=3610113,uid=0</span></span>
<span class="line"><span>Out of memory: Killed process 3610113 (uvicorn) total-vm:4794476kB, anon-rss:1350640kB, file-rss:252kB, shmem-rss:0kB, UID:0 pgtables:3760kB oom_score_adj:0</span></span></code></pre></div><ul><li>进程 <code>uvicorn</code>（PID <code>3610113</code>）因内存不足被系统强制终止。</li><li>该进程占用了约 <strong>4.8GB 虚拟内存（total-vm）</strong> 和 <strong>1.35GB 实际内存（anon-rss）</strong>。</li><li>该进程属于 Docker 容器（<code>task_memcg=/system.slice/docker-xxx.scope</code>）。</li></ul></li><li><p><strong>进程列表分析</strong></p><ul><li><code>uvicorn</code> 是 Python 的 ASGI 服务器（通常用于 FastAPI、Django 等），内存占用异常高（<code>1198619</code> 单位可能是内存页数，换算后约 1.2GB RSS）。</li><li>其他进程（如 <code>nginx</code>、<code>docker</code>、<code>containerd</code>）内存占用正常。</li><li>系统可能未配置足够的交换分区（Swap），导致物理内存耗尽时直接触发 OOM Killer。</li></ul></li><li><p><strong>网络接口变化</strong></p><ul><li>Docker 网络接口因容器崩溃被重新配置（<code>vethXXX</code> 设备变化），这是容器重启的副作用。</li></ul></li></ol><hr><h3 id="根本原因" tabindex="-1"><strong>根本原因</strong> <a class="header-anchor" href="#根本原因" aria-label="Permalink to &quot;**根本原因**&quot;">​</a></h3><ol><li><p><strong>内存不足</strong></p><ul><li><code>uvicorn</code> 进程（或容器内应用）内存泄漏，或单次请求占用内存过高（如大模型加载、大数据处理）。</li><li>系统物理内存 + Swap 不足，无法满足服务需求。</li></ul></li><li><p><strong>上游服务崩溃的连锁反应</strong></p><ul><li><code>uvicorn</code> 被杀死后，Nginx 无法从上游服务（<code>127.0.0.1:8000</code>）获取响应，报错 <code>upstream prematurely closed connection</code>。</li><li>Nginx 尝试切换到 IPv6（<code>[::1]:8000</code>）和其他 Worker，但服务已完全崩溃。</li></ul></li></ol><hr><h3 id="解决方案" tabindex="-1"><strong>解决方案</strong> <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;**解决方案**&quot;">​</a></h3><h4 id="_1-紧急措施" tabindex="-1">1. <strong>紧急措施</strong> <a class="header-anchor" href="#_1-紧急措施" aria-label="Permalink to &quot;1. **紧急措施**&quot;">​</a></h4><ul><li><p><strong>重启服务</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启 Docker 容器（如果使用容器）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">container_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者直接重启 uvicorn 服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-uvicorn-service</span></span></code></pre></div></li><li><p><strong>释放内存</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/sys/vm/drop_caches</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 清理缓存（临时缓解）</span></span></code></pre></div></li></ul><h4 id="_2-长期优化" tabindex="-1">2. <strong>长期优化</strong> <a class="header-anchor" href="#_2-长期优化" aria-label="Permalink to &quot;2. **长期优化**&quot;">​</a></h4><ul><li><p><strong>增加系统内存或 Swap</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加 Swap 文件（例如 4GB）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fallocate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /swapfile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 600</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /swapfile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkswap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /swapfile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> swapon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /swapfile</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/swapfile none swap sw 0 0&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tee</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/fstab</span></span></code></pre></div></li><li><p><strong>限制容器内存</strong><br> 在 <code>docker-compose.yml</code> 或 <code>docker run</code> 中限制内存：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  your-app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    mem_limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2g</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 限制容器最大内存为 2GB</span></span></code></pre></div></li><li><p><strong>优化应用内存使用</strong></p><ul><li>检查代码中的内存泄漏（如全局变量堆积、大文件未流式处理）。</li><li>减少模型加载的冗余副本（如共享内存）。</li><li>使用 <code>gunicorn</code> + <code>uvicorn</code> 限制 Worker 数量：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gunicorn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -k</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uvicorn.workers.UvicornWorker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 【应用入口xx:xx已脱敏】</span></span></code></pre></div></li></ul></li><li><p><strong>监控与告警</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装监控工具（如 htop、prometheus）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">htop</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 实时查看内存使用</span></span></code></pre></div></li></ul><h4 id="_3-nginx-容错配置" tabindex="-1">3. <strong>Nginx 容错配置</strong> <a class="header-anchor" href="#_3-nginx-容错配置" aria-label="Permalink to &quot;3. **Nginx 容错配置**&quot;">​</a></h4><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /api/ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://127.0.0.1:8000;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_read_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_next_upstream </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeout http_500 http_502 http_503 http_504;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="验证步骤" tabindex="-1"><strong>验证步骤</strong> <a class="header-anchor" href="#验证步骤" aria-label="Permalink to &quot;**验证步骤**&quot;">​</a></h3><ol><li><p>检查当前内存和 Swap 使用情况：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">free</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span></span></code></pre></div></li><li><p>查看 OOM Killer 历史记录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dmesg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oom</span></span></code></pre></div></li><li><p>监控服务内存占用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ps aux | grep uvicorn&quot;</span></span></code></pre></div></li></ol><p>如果问题持续，需进一步分析应用代码或模型加载逻辑。</p>`,44)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
