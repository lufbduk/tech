import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.CEHkq4dy.js";const g=JSON.parse('{"title":"嵌套 Git 仓库管理的最佳实践与 pnpm-workspace Monorepo 结合","description":"深入探讨嵌套 Git 仓库（Submodule 与 Subtree）的管理方法，以及如何将其与 pnpm-workspace Monorepo 方案高效结合，包含具体实践、依赖管理、版本控制和 CI/CD 集成策略。","frontmatter":{"title":"嵌套 Git 仓库管理的最佳实践与 pnpm-workspace Monorepo 结合","description":"深入探讨嵌套 Git 仓库（Submodule 与 Subtree）的管理方法，以及如何将其与 pnpm-workspace Monorepo 方案高效结合，包含具体实践、依赖管理、版本控制和 CI/CD 集成策略。","date":"2025-01-26T00:00:00.000Z","tags":["Git","Submodule","Subtree","Monorepo","pnpm-workspace","版本控制"],"keywords":"Git, Submodule, Subtree, Monorepo, pnpm-workspace, 版本控制, 依赖管理, CI/CD, 项目管理, 嵌套仓库","author":"lufbduk","category":"技术笔记","head":[["meta",{"name":"keywords","content":"Git,Submodule,Subtree,Monorepo,pnpm-workspace,版本控制,依赖管理,CI/CD,项目管理,嵌套仓库"}],["meta",{"property":"og:title","content":"嵌套 Git 仓库管理的最佳实践与 pnpm-workspace Monorepo 结合"}],["meta",{"property":"og:description","content":"深入探讨嵌套 Git 仓库（Submodule 与 Subtree）的管理方法，以及如何将其与 pnpm-workspace Monorepo 方案高效结合"}]]},"headers":[],"relativePath":"ai-tech-notes/嵌套 Git 仓库管理的最佳实践.md","filePath":"ai-tech-notes/嵌套 Git 仓库管理的最佳实践.md","lastUpdated":1749284282000}'),l={name:"ai-tech-notes/嵌套 Git 仓库管理的最佳实践.md"};function e(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[t(`<p>==================================================</p><h1 id="嵌套-git-仓库管理的最佳实践" tabindex="-1">嵌套 Git 仓库管理的最佳实践 <a class="header-anchor" href="#嵌套-git-仓库管理的最佳实践" aria-label="Permalink to &quot;嵌套 Git 仓库管理的最佳实践&quot;">​</a></h1><blockquote><p><strong>摘要</strong>：本文深入探讨嵌套 Git 仓库的管理策略，包括 Git Submodule 和 Subtree 的选择和使用，以及如何与 pnpm-workspace Monorepo 方案结合，提供完整的依赖管理、版本控制和 CI/CD 集成实践。</p></blockquote><p>嵌套 Git 仓库（即仓库中包含子仓库）是常见的开发场景，以下是管理这种结构的最佳实践：</p><h2 id="_1-选择合适的子仓库管理方式" tabindex="-1">1. 选择合适的子仓库管理方式 <a class="header-anchor" href="#_1-选择合适的子仓库管理方式" aria-label="Permalink to &quot;1. 选择合适的子仓库管理方式&quot;">​</a></h2><h3 id="git-submodule" tabindex="-1">Git Submodule <a class="header-anchor" href="#git-submodule" aria-label="Permalink to &quot;Git Submodule&quot;">​</a></h3><ul><li><strong>适用场景</strong>：需要引用其他仓库的特定版本</li><li><strong>优点</strong>： <ul><li>精确控制子仓库版本</li><li>主仓库记录子仓库的特定提交</li></ul></li><li><strong>缺点</strong>： <ul><li>学习曲线较陡</li><li>需要额外的命令来更新子模块</li></ul></li></ul><h3 id="git-subtree" tabindex="-1">Git Subtree <a class="header-anchor" href="#git-subtree" aria-label="Permalink to &quot;Git Subtree&quot;">​</a></h3><ul><li><strong>适用场景</strong>：需要将外部项目合并到主项目中</li><li><strong>优点</strong>： <ul><li>单一仓库管理更简单</li><li>不需要额外学习子模块命令</li></ul></li><li><strong>缺点</strong>： <ul><li>历史记录可能变得复杂</li><li>更新外部项目稍显麻烦</li></ul></li></ul><h2 id="_2-最佳实践建议" tabindex="-1">2. 最佳实践建议 <a class="header-anchor" href="#_2-最佳实践建议" aria-label="Permalink to &quot;2. 最佳实践建议&quot;">​</a></h2><h3 id="通用建议" tabindex="-1">通用建议 <a class="header-anchor" href="#通用建议" aria-label="Permalink to &quot;通用建议&quot;">​</a></h3><ul><li><strong>明确需求</strong>：先确定是否需要嵌套结构，有时单一仓库可能更合适</li><li><strong>文档记录</strong>：在README中清晰说明嵌套结构和更新方法</li><li><strong>路径规划</strong>：为子仓库设计合理的目录结构</li></ul><h3 id="git-submodule-最佳实践" tabindex="-1">Git Submodule 最佳实践 <a class="header-anchor" href="#git-submodule-最佳实践" aria-label="Permalink to &quot;Git Submodule 最佳实践&quot;">​</a></h3><ol><li><p><strong>初始化时添加<code>--recursive</code></strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">主仓库UR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p><strong>更新子模块</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> submodule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span></span></code></pre></div></li><li><p><strong>定期同步</strong>：</p><ul><li>进入子模块目录执行常规git操作</li><li>在主仓库提交子模块的新引用</li></ul></li></ol><h3 id="git-subtree-最佳实践" tabindex="-1">Git Subtree 最佳实践 <a class="header-anchor" href="#git-subtree-最佳实践" aria-label="Permalink to &quot;Git Subtree 最佳实践&quot;">​</a></h3><ol><li><p><strong>添加子树</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> subtree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">目录</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">仓库UR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">分</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">支</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --squash</span></span></code></pre></div></li><li><p><strong>更新子树</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> subtree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">目录</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">仓库UR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">分</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">支</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --squash</span></span></code></pre></div></li><li><p><strong>推送更改</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> subtree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">目录</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">仓库UR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">分</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">支</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li></ol><h2 id="_3-替代方案考虑" tabindex="-1">3. 替代方案考虑 <a class="header-anchor" href="#_3-替代方案考虑" aria-label="Permalink to &quot;3. 替代方案考虑&quot;">​</a></h2><ul><li><strong>Monorepo</strong>：对于紧密相关的项目，考虑使用单一大型仓库</li><li><strong>包管理器</strong>：对于依赖管理，考虑使用npm、pip等包管理工具</li><li><strong>构建系统集成</strong>：使用CMake、Bazel等支持外部依赖的构建系统</li></ul><h2 id="_4-自动化与工具" tabindex="-1">4. 自动化与工具 <a class="header-anchor" href="#_4-自动化与工具" aria-label="Permalink to &quot;4. 自动化与工具&quot;">​</a></h2><ul><li>使用CI/CD工具自动化子模块/子树更新</li><li>考虑使用gitmeta等第三方工具管理复杂嵌套结构</li><li>编写脚本简化常用操作</li></ul><h2 id="_5-团队协作注意事项" tabindex="-1">5. 团队协作注意事项 <a class="header-anchor" href="#_5-团队协作注意事项" aria-label="Permalink to &quot;5. 团队协作注意事项&quot;">​</a></h2><ul><li>确保所有团队成员了解嵌套结构</li><li>在文档中明确子仓库的修改流程</li><li>考虑权限管理（特别是对子仓库的访问权限）</li></ul><p>选择哪种方法取决于项目需求、团队规模和开发流程，关键是保持一致性并确保所有团队成员理解所选方案的工作方式。</p><p>==================================================</p><h1 id="嵌套-git-仓库与-pnpm-workspace-monorepo-的结合实践" tabindex="-1">嵌套 Git 仓库与 pnpm-workspace Monorepo 的结合实践 <a class="header-anchor" href="#嵌套-git-仓库与-pnpm-workspace-monorepo-的结合实践" aria-label="Permalink to &quot;嵌套 Git 仓库与 pnpm-workspace Monorepo 的结合实践&quot;">​</a></h1><p>将嵌套 Git 仓库管理的最佳实践与 pnpm-workspace 驱动的 Monorepo 方案结合时，需要考虑两种范式的优势互补。以下是具体的整合方法和实践建议：</p><h2 id="_1-架构层级关系" tabindex="-1">1. 架构层级关系 <a class="header-anchor" href="#_1-架构层级关系" aria-label="Permalink to &quot;1. 架构层级关系&quot;">​</a></h2><h3 id="理想的分层结构" tabindex="-1">理想的分层结构 <a class="header-anchor" href="#理想的分层结构" aria-label="Permalink to &quot;理想的分层结构&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>monorepo/ (pnpm-workspace 主仓库)</span></span>
<span class="line"><span>├── packages/ (主要工作区)</span></span>
<span class="line"><span>│   ├── app1/ (独立应用或服务)</span></span>
<span class="line"><span>│   ├── lib1/ (共享库)</span></span>
<span class="line"><span>│   └── lib2/ </span></span>
<span class="line"><span>├── externals/ (外部依赖管理区)</span></span>
<span class="line"><span>│   ├── submodule1/ (Git submodule)</span></span>
<span class="line"><span>│   └── subtree1/ (Git subtree)</span></span>
<span class="line"><span>└── pnpm-workspace.yaml</span></span></code></pre></div><h2 id="_2-整合策略" tabindex="-1">2. 整合策略 <a class="header-anchor" href="#_2-整合策略" aria-label="Permalink to &quot;2. 整合策略&quot;">​</a></h2><h3 id="_2-1-子模块-submodule-与-pnpm-workspace-结合" tabindex="-1">2.1 子模块(submodule)与 pnpm-workspace 结合 <a class="header-anchor" href="#_2-1-子模块-submodule-与-pnpm-workspace-结合" aria-label="Permalink to &quot;2.1 子模块(submodule)与 pnpm-workspace 结合&quot;">​</a></h3><ul><li><strong>适用场景</strong>：需要精确控制版本的外部依赖</li><li><strong>实践方法</strong>： <ol><li>将 submodule 放在 <code>externals/</code> 目录下</li><li>在 pnpm-workspace.yaml 中排除这些目录：<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;packages/**&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!externals/**&#39;</span></span></code></pre></div></li><li>通过 pnpm 的 file:协议引用：<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;external-lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file:../externals/submodule1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol></li></ul><h3 id="_2-2-子树-subtree-与-pnpm-workspace-结合" tabindex="-1">2.2 子树(subtree)与 pnpm-workspace 结合 <a class="header-anchor" href="#_2-2-子树-subtree-与-pnpm-workspace-结合" aria-label="Permalink to &quot;2.2 子树(subtree)与 pnpm-workspace 结合&quot;">​</a></h3><ul><li><strong>适用场景</strong>：需要深度定制的外部项目</li><li><strong>实践方法</strong>： <ol><li>使用 subtree 将外部项目导入到 <code>packages/</code> 下</li><li>像管理普通 package 一样管理它：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> subtree</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix=packages/external-lib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/external/lib.git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --squash</span></span></code></pre></div></li><li>其他包可以直接通过 workspace:协议引用</li></ol></li></ul><h2 id="_3-依赖管理策略" tabindex="-1">3. 依赖管理策略 <a class="header-anchor" href="#_3-依赖管理策略" aria-label="Permalink to &quot;3. 依赖管理策略&quot;">​</a></h2><h3 id="_3-1-优先使用-pnpm-workspace-协议" tabindex="-1">3.1 优先使用 pnpm workspace 协议 <a class="header-anchor" href="#_3-1-优先使用-pnpm-workspace-协议" aria-label="Permalink to &quot;3.1 优先使用 pnpm workspace 协议&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;internal-lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;external-lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:../externals/submodule1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-2-混合依赖解决方案" tabindex="-1">3.2 混合依赖解决方案 <a class="header-anchor" href="#_3-2-混合依赖解决方案" aria-label="Permalink to &quot;3.2 混合依赖解决方案&quot;">​</a></h3><ol><li><strong>内部依赖</strong>：完全通过 pnpm workspace 管理</li><li><strong>外部依赖</strong>： <ul><li>能 npm 发布的：通过 pnpm 正常安装</li><li>必须源码控制的：通过 submodule/subtree 引入</li></ul></li></ol><h2 id="_4-开发工作流优化" tabindex="-1">4. 开发工作流优化 <a class="header-anchor" href="#_4-开发工作流优化" aria-label="Permalink to &quot;4. 开发工作流优化&quot;">​</a></h2><h3 id="_4-1-初始化流程" tabindex="-1">4.1 初始化流程 <a class="header-anchor" href="#_4-1-初始化流程" aria-label="Permalink to &quot;4.1 初始化流程&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">monorepo-ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setup</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 自定义脚本处理子模块初始化</span></span></code></pre></div><h3 id="_4-2-自动化脚本示例" tabindex="-1">4.2 自动化脚本示例 <a class="header-anchor" href="#_4-2-自动化脚本示例" aria-label="Permalink to &quot;4.2 自动化脚本示例&quot;">​</a></h3><p>在 package.json 中添加：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;postinstall&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git submodule update --init --recursive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;update:externals&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git submodule foreach git pull origin main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_5-版本控制策略" tabindex="-1">5. 版本控制策略 <a class="header-anchor" href="#_5-版本控制策略" aria-label="Permalink to &quot;5. 版本控制策略&quot;">​</a></h2><h3 id="_5-1-统一版本管理" tabindex="-1">5.1 统一版本管理 <a class="header-anchor" href="#_5-1-统一版本管理" aria-label="Permalink to &quot;5.1 统一版本管理&quot;">​</a></h3><ul><li>使用 changesets 或 rush.js 管理整个 monorepo 版本</li><li>对 submodule 保持其独立版本周期</li></ul><h3 id="_5-2-提交规范" tabindex="-1">5.2 提交规范 <a class="header-anchor" href="#_5-2-提交规范" aria-label="Permalink to &quot;5.2 提交规范&quot;">​</a></h3><ul><li>主仓库提交信息注明子模块更新：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat: update authentication logic</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- Updated auth lib in packages/auth</span></span>
<span class="line"><span>- Bumped submodule externals/security-lib@a1b2c3d</span></span></code></pre></div></li></ul><h2 id="_6-ci-cd-集成" tabindex="-1">6. CI/CD 集成 <a class="header-anchor" href="#_6-ci-cd-集成" aria-label="Permalink to &quot;6. CI/CD 集成&quot;">​</a></h2><h3 id="_6-1-流水线配置示例" tabindex="-1">6.1 流水线配置示例 <a class="header-anchor" href="#_6-1-流水线配置示例" aria-label="Permalink to &quot;6.1 流水线配置示例&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">checkout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      submodules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">recursive</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pnpm install</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pnpm build</span></span></code></pre></div><h3 id="_6-2-缓存策略" tabindex="-1">6.2 缓存策略 <a class="header-anchor" href="#_6-2-缓存策略" aria-label="Permalink to &quot;6.2 缓存策略&quot;">​</a></h3><ul><li>分别缓存 pnpm store 和 git submodules</li><li>并行处理内部包和外部依赖的测试</li></ul><h2 id="_7-优缺点对比" tabindex="-1">7. 优缺点对比 <a class="header-anchor" href="#_7-优缺点对比" aria-label="Permalink to &quot;7. 优缺点对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>纯 pnpm workspace</strong></td><td>简单统一，依赖管理一致</td><td>无法精确控制外部依赖版本</td></tr><tr><td><strong>pnpm + submodule</strong></td><td>外部依赖版本可控，隔离清晰</td><td>增加复杂度，需额外学习</td></tr><tr><td><strong>pnpm + subtree</strong></td><td>单仓库操作简单，历史完整</td><td>仓库体积增大，更新麻烦</td></tr></tbody></table><h2 id="_8-推荐选择策略" tabindex="-1">8. 推荐选择策略 <a class="header-anchor" href="#_8-推荐选择策略" aria-label="Permalink to &quot;8. 推荐选择策略&quot;">​</a></h2><ol><li><strong>优先纯 pnpm workspace</strong>：所有代码都在同一团队控制下时</li><li><strong>submodule + pnpm</strong>：需要集成重要第三方项目且需精确控制版本时</li><li><strong>subtree + pnpm</strong>：需要深度定制外部项目且不常更新时</li></ol><p>这种结合方案既能享受 monorepo 的开发便利性，又能通过 git 原生机制管理关键外部依赖，适合中大型项目的基础架构管理。</p><p>==================================================</p><h2 id="针对本项目的具体实践" tabindex="-1">针对本项目的具体实践 <a class="header-anchor" href="#针对本项目的具体实践" aria-label="Permalink to &quot;针对本项目的具体实践&quot;">​</a></h2><h3 id="包分类管理" tabindex="-1">包分类管理 <a class="header-anchor" href="#包分类管理" aria-label="Permalink to &quot;包分类管理&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ziiobase/</span></span>
<span class="line"><span>├── packages/</span></span>
<span class="line"><span>│   ├── jsonmr/     # 基础类型包 - 核心依赖</span></span>
<span class="line"><span>│   ├── mindmr/     # 扩展类型包 - 依赖 jsonmr</span></span>
<span class="line"><span>│   ├── ziio-ui/    # UI组件库 - 依赖基础包</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>├── apps/</span></span>
<span class="line"><span>│   ├── ziio-ui-demo/      # UI演示应用</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>└── externals/</span></span>
<span class="line"><span>    └── primevue-extensions/  # 如果需要定制PrimeVue</span></span></code></pre></div><h3 id="依赖关系示例" tabindex="-1">依赖关系示例 <a class="header-anchor" href="#依赖关系示例" aria-label="Permalink to &quot;依赖关系示例&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// packages/ziio-ui/package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;jsonmr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;mindmr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;primevue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.0.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // npm 包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="与-changesets-的协同工作" tabindex="-1">与 Changesets 的协同工作 <a class="header-anchor" href="#与-changesets-的协同工作" aria-label="Permalink to &quot;与 Changesets 的协同工作&quot;">​</a></h3><ul><li><strong>内部包版本</strong>：通过 Changesets 统一管理</li><li><strong>外部依赖版本</strong>：通过 submodule 精确锁定</li><li><strong>发布策略</strong>：开发时使用 workspace:，发布时转换为具体版本号</li></ul><h3 id="团队开发流程" tabindex="-1">团队开发流程 <a class="header-anchor" href="#团队开发流程" aria-label="Permalink to &quot;团队开发流程&quot;">​</a></h3><ol><li><p><strong>新成员入职</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recursive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/team/ziiobase.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></li><li><p><strong>日常开发</strong>：</p><ul><li>修改内部包：直接在 packages/ 下开发</li><li>更新外部依赖：先更新 submodule，再提交引用</li></ul></li><li><p><strong>版本发布</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changeset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span></span></code></pre></div></li></ol><p>==================================================</p>`,71)]))}const c=i(l,[["render",e]]);export{g as __pageData,c as default};
