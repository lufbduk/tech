import{_ as e,c as i,o as a,ae as n}from"./chunks/framework.CEHkq4dy.js";const c=JSON.parse('{"title":"npm 包依赖管理最佳实践：dependencies 与 peerDependencies 深度解析","description":"深入探讨 npm 中 dependencies 和 peerDependencies 的区别、安装行为、打包影响以及最佳实践，帮助开发者避免依赖冲突和冗余安装。","frontmatter":{"title":"npm 包依赖管理最佳实践：dependencies 与 peerDependencies 深度解析","description":"深入探讨 npm 中 dependencies 和 peerDependencies 的区别、安装行为、打包影响以及最佳实践，帮助开发者避免依赖冲突和冗余安装。","date":"2025-01-24T00:00:00.000Z","tags":["npm","包管理","dependencies","peerDependencies","Node.js","前端工程化"],"keywords":"npm, dependencies, peerDependencies, package.json, node_modules, 打包, webpack, externals, 依赖管理, 前端开发, JavaScript, Node.js, 最佳实践, 版本冲突, 共享依赖","author":"lufbduk","category":"技术笔记","head":[["meta",{"name":"keywords","content":"npm,dependencies,peerDependencies,package.json,node_modules,打包,webpack,externals,依赖管理,前端开发"}],["meta",{"property":"og:title","content":"npm 包依赖管理最佳实践：dependencies 与 peerDependencies 深度解析"}],["meta",{"property":"og:description","content":"深入探讨 npm 中 dependencies 和 peerDependencies 的区别、安装行为、打包影响以及最佳实践，帮助开发者避免依赖冲突和冗余安装"}]]},"headers":[],"relativePath":"ai-tech-notes/npm包依赖管理最佳实践.md","filePath":"ai-tech-notes/npm包依赖管理最佳实践.md","lastUpdated":1749284282000}'),t={name:"ai-tech-notes/npm包依赖管理最佳实践.md"};function l(p,s,d,h,r,o){return a(),i("div",null,s[0]||(s[0]=[n(`<blockquote><p><strong>摘要</strong>：本文深入分析 npm 中 dependencies 和 peerDependencies 的核心区别，包括安装行为、打包影响、版本冲突处理等关键方面，提供实用的依赖管理最佳实践，帮助开发者避免常见的依赖问题。</p></blockquote><p>==================================================</p><p>peerDependencies 和 dependencies 到底有什么区别</p><p>==================================================</p><p>在 npm 的 <code>package.json</code> 文件中，<code>dependencies</code> 和 <code>peerDependencies</code> 都用于管理依赖，但它们的用途和行为有本质区别：</p><hr><h3 id="_1-dependencies" tabindex="-1"><strong>1. dependencies</strong> <a class="header-anchor" href="#_1-dependencies" aria-label="Permalink to &quot;**1. dependencies**&quot;">​</a></h3><ul><li><strong>用途</strong>：声明当前包<strong>直接依赖</strong>的第三方库。</li><li><strong>安装行为</strong>： <ul><li>当用户安装你的包时，这些依赖会被<strong>自动安装</strong>到你的 <code>node_modules</code> 中。</li><li>如果依赖库有多个版本，npm/yarn 会通过嵌套安装解决冲突（不同包可使用各自兼容的版本）。</li></ul></li><li><strong>适用场景</strong>：<br> 你的包<strong>运行时必须</strong>的库（例如 <code>lodash</code>、<code>axios</code> 等）。</li><li><strong>示例</strong>：<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lodash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.17.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><hr><h3 id="_2-peerdependencies" tabindex="-1"><strong>2. peerDependencies</strong> <a class="header-anchor" href="#_2-peerdependencies" aria-label="Permalink to &quot;**2. peerDependencies**&quot;">​</a></h3><ul><li><strong>用途</strong>：声明当前包<strong>需要宿主环境提供</strong>的依赖（通常是共享库）。</li><li><strong>安装行为</strong>： <ul><li><strong>不会自动安装</strong>这些依赖！</li><li>如果用户安装你的包时，宿主环境<strong>没有安装</strong>指定的依赖（或版本不兼容），会抛出警告（npm &lt;7）或错误（npm ≥7）。</li><li>用户必须<strong>手动安装</strong>这些依赖到宿主项目中。</li></ul></li><li><strong>设计目的</strong>：避免<strong>重复安装</strong>和<strong>版本冲突</strong>（强制共享同一份依赖）。</li><li><strong>适用场景</strong>： <ul><li>插件类库（如 <code>webpack-plugin</code> 需要共享宿主项目的 <code>webpack</code>）。</li><li>组件库（如 React 组件库需要共享宿主项目的 <code>react</code>）。</li></ul></li><li><strong>示例</strong>：<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=16.8.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><hr><h3 id="关键区别总结" tabindex="-1"><strong>关键区别总结</strong> <a class="header-anchor" href="#关键区别总结" aria-label="Permalink to &quot;**关键区别总结**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>dependencies</th><th>peerDependencies</th></tr></thead><tbody><tr><td><strong>安装行为</strong></td><td>自动安装到当前包 <code>node_modules</code></td><td>不自动安装，需宿主环境提供</td></tr><tr><td><strong>版本冲突解决</strong></td><td>允许嵌套多版本</td><td>强制宿主环境共享单版本</td></tr><tr><td><strong>适用场景</strong></td><td>私有依赖（仅当前包需要）</td><td>公共依赖（需与宿主共享）</td></tr><tr><td><strong>用户责任</strong></td><td>无需手动操作</td><td>必须确保宿主环境安装正确版本</td></tr><tr><td><strong>典型用例</strong></td><td><code>axios</code>, <code>lodash</code> 等工具库</td><td>React 组件库、Webpack 插件等</td></tr></tbody></table><hr><h3 id="为什么需要-peerdependencies" tabindex="-1"><strong>为什么需要 peerDependencies？</strong> <a class="header-anchor" href="#为什么需要-peerdependencies" aria-label="Permalink to &quot;**为什么需要 peerDependencies？**&quot;">​</a></h3><p>假设你开发一个 React 组件库：</p><ul><li>如果将其放入 <code>dependencies</code>：<br> 用户项目中可能安装<strong>两份 React</strong>（你的组件库内一份 + 用户项目一份），导致打包体积增大，甚至引发 React 上下文错乱。</li><li>使用 <code>peerDependencies</code>：<br> 强制组件库与宿主项目<strong>共享同一份 React</strong>，避免重复安装和版本冲突。</li></ul><hr><h3 id="npm-版本差异" tabindex="-1"><strong>npm 版本差异</strong> <a class="header-anchor" href="#npm-版本差异" aria-label="Permalink to &quot;**npm 版本差异**&quot;">​</a></h3><ul><li><strong>npm v3-v6</strong>：只对缺失的 <code>peerDependencies</code> 输出警告，不阻塞安装。</li><li><strong>npm v7+</strong>：自动安装 <code>peerDependencies</code>（但要求版本范围兼容），不兼容则报错。</li><li><strong>Yarn</strong>：默认不安装，需配合 <code>yarn install --flat</code> 或显式添加到宿主依赖。</li></ul><hr><h3 id="最佳实践" tabindex="-1"><strong>最佳实践</strong> <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;**最佳实践**&quot;">​</a></h3><ol><li><strong>库/插件开发者</strong>： <ul><li>将核心框架（如 React、Vue、Webpack）放入 <code>peerDependencies</code> + <code>devDependencies</code>（用于本地测试）。</li><li>私有工具库放入 <code>dependencies</code>。</li></ul></li><li><strong>应用开发者</strong>： <ul><li>直接管理所有依赖（包括 <code>peerDependencies</code> 要求的库），无需特殊操作。</li></ul></li></ol><p>通过正确使用两者，可显著避免依赖冲突和冗余安装问题。</p><p>==================================================</p><p>它们在打包的时候有没有什么区别</p><p>==================================================</p><p>在打包过程中（如使用 Webpack、Rollup 等工具），<code>dependencies</code> 和 <code>peerDependencies</code> 的处理方式有显著区别，直接影响最终产物的体积和运行方式：</p><hr><h3 id="_1-dependencies-的打包行为" tabindex="-1"><strong>1. dependencies 的打包行为</strong> <a class="header-anchor" href="#_1-dependencies-的打包行为" aria-label="Permalink to &quot;**1. dependencies 的打包行为**&quot;">​</a></h3><ul><li><strong>默认打包进产物</strong><br> 工具会将 <code>dependencies</code> 中的模块视为<strong>私有依赖</strong>，直接打包进最终输出文件（如 <code>dist/main.js</code>）。</li><li><strong>重复打包风险</strong><br> 如果多个库依赖同一个包（如 <code>lodash</code>），每个库都会将自己的 <code>lodash</code> 打包进产物，导致：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">final-bundle.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LibraryA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lodash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v4.17.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (50KB)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LibraryB</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lodash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v4.17.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (50KB)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重复！</span></span></code></pre></div></li><li><strong>适用场景</strong><br> 适合<strong>不期望宿主环境提供</strong>的私有工具库（如内部封装的 <code>utils</code> 等）。</li></ul><hr><h3 id="_2-peerdependencies-的打包行为" tabindex="-1"><strong>2. peerDependencies 的打包行为</strong> <a class="header-anchor" href="#_2-peerdependencies-的打包行为" aria-label="Permalink to &quot;**2. peerDependencies 的打包行为**&quot;">​</a></h3><ul><li><strong>默认排除在产物外</strong><br> 打包工具会将 <code>peerDependencies</code> 视为<strong>外部依赖</strong>（externals），<strong>不会打包进最终产物</strong>。</li><li><strong>依赖宿主环境提供</strong><br> 在代码中保留 <code>import</code> 语句，运行时从宿主环境的 <code>node_modules</code> 加载：<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打包后代码保留原始导入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从宿主项目获取</span></span></code></pre></div></li><li><strong>避免重复打包</strong><br> 确保多个库共享宿主环境的同一份依赖：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">final-bundle.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> YourComponentLib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (不含 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">React</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HostProject</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v18.2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (120KB)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 仅一份</span></span></code></pre></div></li></ul><hr><h3 id="关键打包差异对比" tabindex="-1"><strong>关键打包差异对比</strong> <a class="header-anchor" href="#关键打包差异对比" aria-label="Permalink to &quot;**关键打包差异对比**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>dependencies</th><th>peerDependencies</th></tr></thead><tbody><tr><td><strong>是否打包进产物</strong></td><td>✅ 是</td><td>❌ 否（默认）</td></tr><tr><td><strong>打包工具配置</strong></td><td>自动包含</td><td>需配为 <code>externals</code> (或自动识别)</td></tr><tr><td><strong>产物体积影响</strong></td><td>增大体积（可能重复）</td><td>不增加体积</td></tr><tr><td><strong>运行时依赖来源</strong></td><td>当前包的 <code>node_modules</code></td><td>宿主项目的 <code>node_modules</code></td></tr><tr><td><strong>典型场景</strong></td><td>私有工具函数、内部库</td><td>框架组件(React/Vue)、插件(Webpack)</td></tr></tbody></table><hr><h3 id="打包配置示例-webpack" tabindex="-1"><strong>打包配置示例（Webpack）</strong> <a class="header-anchor" href="#打包配置示例-webpack" aria-label="Permalink to &quot;**打包配置示例（Webpack）**&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js（组件库配置）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  externals: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 关键：将 peerDependencies 设为外部依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    react: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;react-dom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;react-dom&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><hr><h3 id="为什么-peerdependencies-需要特殊打包处理" tabindex="-1"><strong>为什么 peerDependencies 需要特殊打包处理？</strong> <a class="header-anchor" href="#为什么-peerdependencies-需要特殊打包处理" aria-label="Permalink to &quot;**为什么 peerDependencies 需要特殊打包处理？**&quot;">​</a></h3><p>以 React 组件库为例：</p><ol><li><p><strong>避免重复打包</strong><br> 若将 React 打包进组件库，用户项目会同时存在：</p><ul><li>组件库内的 React (50KB)</li><li>用户项目的 React (50KB) → <strong>总体积增加 100KB</strong></li></ul></li><li><p><strong>避免上下文冲突</strong><br> React 依赖全局上下文（如 <code>React.createContext</code>），多个 React 实例会导致：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用户项目</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 版本 18</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件库内部</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 版本 17 (已打包进组件)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导致 Context、Hooks 等 API 失效</span></span></code></pre></div></li></ol><hr><h3 id="peerdependencies-的打包注意事项" tabindex="-1"><strong>peerDependencies 的打包注意事项</strong> <a class="header-anchor" href="#peerdependencies-的打包注意事项" aria-label="Permalink to &quot;**peerDependencies 的打包注意事项**&quot;">​</a></h3><ol><li><p><strong>开发环境特殊处理</strong><br> 在组件库的本地开发中，需将 <code>peerDependencies</code> 安装到 <code>devDependencies</code>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=16.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^18.2.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 用于本地测试和打包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Tree Shaking 优化</strong><br> 当 <code>peerDependencies</code> 设为外部依赖时，宿主项目的打包工具可对共享库做 Tree Shaking。</p></li><li><p><strong>动态依赖警告</strong><br> 若代码动态加载 peer 依赖（如 <code>require(&#39;react/&#39; + path)</code>），需显式配置 externals：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Webpack 配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">externals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  react</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonjs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonjs2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    amd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;react&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><hr><h3 id="总结-打包决策指南" tabindex="-1"><strong>总结：打包决策指南</strong> <a class="header-anchor" href="#总结-打包决策指南" aria-label="Permalink to &quot;**总结：打包决策指南**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>你的包类型</strong></th><th><strong>依赖类型</strong></th><th><strong>打包建议</strong></th></tr></thead><tbody><tr><td>应用项目</td><td>所有依赖</td><td>全部打包进产物</td></tr><tr><td>公共组件库/插件</td><td>框架(React/Vue 等)</td><td>peerDependencies + 设为 externals</td></tr><tr><td>公共组件库/插件</td><td>私有工具(如内部 utils)</td><td>dependencies + 打包进产物</td></tr><tr><td>独立运行的工具库</td><td>所有必需依赖</td><td>dependencies + 打包进产物</td></tr></tbody></table><p>正确区分两者可避免 <strong>“打包体积膨胀”</strong> 和 <strong>“多实例冲突”</strong> 两大核心问题。</p><p>==================================================</p><p>看起来这个把 peerDependencies 设为 externals 的步骤是手动执行的，那如果一般的 dependencies 也设为 externals，打包的时候有区别吗</p><p>==================================================</p><p>你说得非常对！<strong>将 <code>peerDependencies</code> 设为 <code>externals</code> 确实是手动配置的</strong>，而 <code>dependencies</code> 默认是会被打包的。但如果<strong>主动将 <code>dependencies</code> 也设为 <code>externals</code></strong>，打包行为会发生变化，但运行时会产生关键差异。下面通过对比帮你彻底理清：</p><hr><h3 id="配置对比实验-假设打包工具为-webpack" tabindex="-1">配置对比实验（假设打包工具为 Webpack） <a class="header-anchor" href="#配置对比实验-假设打包工具为-webpack" aria-label="Permalink to &quot;配置对比实验（假设打包工具为 Webpack）&quot;">​</a></h3><h4 id="场景设定" tabindex="-1">场景设定： <a class="header-anchor" href="#场景设定" aria-label="Permalink to &quot;场景设定：&quot;">​</a></h4><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-library&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lodash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^4.17.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 私有工具</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=16.8&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 共享框架</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_1-默认行为-不配置-externals" tabindex="-1">1. <strong>默认行为（不配置 externals）</strong> <a class="header-anchor" href="#_1-默认行为-不配置-externals" aria-label="Permalink to &quot;1. **默认行为（不配置 externals）**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>依赖类型</th><th>是否打包进产物</th><th>运行时来源</th><th>风险</th></tr></thead><tbody><tr><td><code>dependencies</code></td><td>✅ 是</td><td>当前库的 <code>node_modules</code></td><td>无</td></tr><tr><td><code>peerDependencies</code></td><td>❌ 否</td><td>宿主项目的 <code>node_modules</code></td><td><strong>宿主未安装则报错</strong></td></tr></tbody></table><h4 id="_2-手动将-lodash-dependencies-设为-externals" tabindex="-1">2. <strong>手动将 <code>lodash</code> (dependencies) 设为 externals</strong> <a class="header-anchor" href="#_2-手动将-lodash-dependencies-设为-externals" aria-label="Permalink to &quot;2. **手动将 \`lodash\` (dependencies) 设为 externals**&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  externals: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lodash: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lodash&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 关键：强制外部化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><table tabindex="0"><thead><tr><th>依赖类型</th><th>是否打包进产物</th><th>运行时来源</th><th>风险</th></tr></thead><tbody><tr><td><code>dependencies</code></td><td>❌ 否</td><td>宿主项目的 <code>node_modules</code></td><td><strong>宿主未安装则报错</strong></td></tr><tr><td><code>peerDependencies</code></td><td>❌ 否</td><td>宿主项目的 <code>node_modules</code></td><td><strong>宿主未安装则报错</strong></td></tr></tbody></table><hr><h3 id="关键区别解析" tabindex="-1">关键区别解析 <a class="header-anchor" href="#关键区别解析" aria-label="Permalink to &quot;关键区别解析&quot;">​</a></h3><h4 id="🔥-核心差异-安装责任方不同" tabindex="-1">🔥 核心差异：<strong>安装责任方不同</strong> <a class="header-anchor" href="#🔥-核心差异-安装责任方不同" aria-label="Permalink to &quot;🔥 核心差异：**安装责任方不同**&quot;">​</a></h4><table tabindex="0"><thead><tr><th>依赖类型</th><th>设为 externals 后的实际行为</th><th>责任方</th></tr></thead><tbody><tr><td><code>peerDependencies</code></td><td>符合预期，宿主<strong>必须安装</strong>（本来就是宿主责任）</td><td>✅ 合理</td></tr><tr><td><code>dependencies</code></td><td><strong>转嫁责任</strong>，宿主<strong>意外承担</strong>了本不该安装的依赖</td><td>❌ 不合理</td></tr></tbody></table><h4 id="⚠️-风险示意图" tabindex="-1">⚠️ 风险示意图： <a class="header-anchor" href="#⚠️-风险示意图" aria-label="Permalink to &quot;⚠️ 风险示意图：&quot;">​</a></h4><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[宿主项目] --&gt; B[使用 my-library]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C{依赖检查}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt;|需要 react| D[宿主已安装]    %% peerDependency 合理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt;|需要 lodash| E[宿主未安装]   %% dependency 外部化导致错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; F[运行时崩溃：Cannot find module &#39;lodash&#39;]</span></span></code></pre></div><hr><h3 id="为什么不能随意将-dependencies-外部化" tabindex="-1">为什么不能随意将 dependencies 外部化？ <a class="header-anchor" href="#为什么不能随意将-dependencies-外部化" aria-label="Permalink to &quot;为什么不能随意将 dependencies 外部化？&quot;">​</a></h3><h4 id="_1-破坏封装性" tabindex="-1">1. <strong>破坏封装性</strong> <a class="header-anchor" href="#_1-破坏封装性" aria-label="Permalink to &quot;1. **破坏封装性**&quot;">​</a></h4><ul><li>你的库宣称：”我自带 <code>lodash</code>，用户无需关心“</li><li>但外部化后实际变成：”我用 <code>lodash</code>，但用户得自己装“</li><li><strong>相当于把私有依赖变成了隐形的 peerDependency</strong></li></ul><h4 id="_2-版本冲突风险" tabindex="-1">2. <strong>版本冲突风险</strong> <a class="header-anchor" href="#_2-版本冲突风险" aria-label="Permalink to &quot;2. **版本冲突风险**&quot;">​</a></h4><ul><li>你的库测试的是 <code>lodash@4.17.0</code></li><li>宿主项目装了 <code>lodash@3.0.0</code>（旧版缺少某些 API）</li><li><strong>运行时报错</strong>：<code>this.merge is not a function</code>（实际是 <code>_.merge</code> 在 v3 不存在）</li></ul><h4 id="_3-安装语义混淆" tabindex="-1">3. <strong>安装语义混淆</strong> <a class="header-anchor" href="#_3-安装语义混淆" aria-label="Permalink to &quot;3. **安装语义混淆**&quot;">​</a></h4><ul><li>用户看到 <code>package.json</code> 中只有 <code>&quot;my-library&quot;: &quot;^1.0.0&quot;</code></li><li>安装后却要求手动装 <code>lodash</code>（用户：？？？）</li></ul><hr><h3 id="何时可以主动外部化-dependencies" tabindex="-1">何时可以主动外部化 dependencies？ <a class="header-anchor" href="#何时可以主动外部化-dependencies" aria-label="Permalink to &quot;何时可以主动外部化 dependencies？&quot;">​</a></h3><h4 id="✅-合理场景" tabindex="-1">✅ 合理场景： <a class="header-anchor" href="#✅-合理场景" aria-label="Permalink to &quot;✅ 合理场景：&quot;">​</a></h4><ol><li><p><strong>微前端共享依赖</strong><br> 主应用已通过 <code>&lt;script&gt;</code> 全局暴露 <code>lodash</code>，子应用复用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">externals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lodash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;_&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 映射到全局变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>CDN 依赖优化</strong><br> 大型库（如 three.js）通过 CDN 引入：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 宿主 HTML --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">externals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;three&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;THREE&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h4 id="⛔-错误场景" tabindex="-1">⛔ 错误场景： <a class="header-anchor" href="#⛔-错误场景" aria-label="Permalink to &quot;⛔ 错误场景：&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 反模式：将私有工具库外部化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">externals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;internal-utils&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;internalUtils&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 宿主根本不知道要装它！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h3 id="最佳实践总结" tabindex="-1">最佳实践总结 <a class="header-anchor" href="#最佳实践总结" aria-label="Permalink to &quot;最佳实践总结&quot;">​</a></h3><table tabindex="0"><thead><tr><th>操作</th><th>推荐度</th><th>说明</th></tr></thead><tbody><tr><td>peerDependencies + externals</td><td>⭐⭐⭐⭐⭐</td><td>标准做法，避免重复打包框架依赖</td></tr><tr><td>dependencies 不处理</td><td>⭐⭐⭐⭐⭐</td><td>私有依赖应打包进产物，保持封装性</td></tr><tr><td>dependencies + externals</td><td>⭐☆</td><td>仅在宿主<strong>明确全局提供</strong>时使用（如 CDN/微前端），需强约定</td></tr><tr><td>peerDependencies 不外部化</td><td>⚠️ 禁止</td><td>会导致框架被打包进库，引发重复安装和上下文错乱</td></tr></tbody></table><hr><h3 id="终极决策树" tabindex="-1">终极决策树 <a class="header-anchor" href="#终极决策树" aria-label="Permalink to &quot;终极决策树&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[我的依赖] --&gt; B{是否期望宿主安装？}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|是：框架/插件| C[peerDependencies + 设为 externals]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt;|否：私有工具| D[dependencies + 不设 externals]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; E{是否需CDN/微前端共享？}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt;|是| F[主动 externals + 文档说明]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt;|否| G[默认打包进产物]</span></span></code></pre></div><p><strong>简单说：</strong><br><code>peerDependencies</code> + <code>externals</code> = ”我用宿主的环境“<br><code>dependencies</code> 不处理 = ”我自带干粮，自给自足“</p><p>==================================================</p>`,93)]))}const g=e(t,[["render",l]]);export{c as __pageData,g as default};
